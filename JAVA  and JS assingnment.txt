A. Create an array with the values (1, 2, 3, 4, 5, 6, 7) and shuffle it .

import java.util.Random;

public class ShuffleArray {
    public static void main(String[] args) {
        int[] myArray = {1, 2, 3, 4, 5, 6, 7};
        shuffleArray(myArray);

        for (int i = 0; i < myArray.length; i++) {
            System.out.print(myArray[i] + " ");
        }
    }

    public static void shuffleArray(int[] array) {
        int n = array.length;
        Random rand = new Random();

        for (int i = n - 1; i > 0; i--) {
            int j = rand.nextInt(i + 1);

            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
    }
}

B. Enter a Roman Number as input and convert it to an integer. (ex IX = 9).

import java.util.HashMap;

public class RomanToInteger {
    public static void main(String[] args) {
        String romanNumeral = "IX"; // Replace with your Roman numeral input
        int result = romanToInt(romanNumeral);
        System.out.println("Roman numeral " + romanNumeral + " is equivalent to " + result);
    }

    public static int romanToInt(String s) {
      
        HashMap<Character, Integer> romanMap = new HashMap<>();
        romanMap.put('I', 1);
        romanMap.put('V', 5);
        romanMap.put('X', 10);
        romanMap.put('L', 50);
        romanMap.put('C', 100);
        romanMap.put('D', 500);
        romanMap.put('M', 1000);

        int result = 0;

        for (int i = 0; i < s.length(); i++) {
            int current = romanMap.get(s.charAt(i));
            int next = (i < s.length() - 1) ? romanMap.get(s.charAt(i + 1)) : 0;

            if (current < next) {
                result += next - current;
                i++; // Skip the next character
            } else {
                result += current;
            }
        }

        return result;
    }
}

C. Check if the input is pangram or not. (Pangram is a sentence that contains all the alphabet from a-z)

import java.util.HashSet;

public class PangramChecker {
    public static void main(String[] args) {
        String sentence = "The quick brown fox jumps over the lazy dog"; // Replace with your input
        boolean isPangram = isPangram(sentence);
        
        if (isPangram) {
            System.out.println("The input is a pangram.");
        } else {
            System.out.println("The input is not a pangram.");
        }
    }

    public static boolean isPangram(String sentence) {
        // Create a HashSet to store unique letters
        HashSet<Character> letterSet = new HashSet<>();

        // Remove spaces and convert the sentence to lowercase
        sentence = sentence.replaceAll(" ", "").toLowerCase();

        // Iterate through the sentence and add unique letters to the HashSet
        for (char c : sentence.toCharArray()) {
            if (c >= 'a' && c <= 'z') {
                letterSet.add(c);
            }
        }

        // Check if the HashSet contains all 26 letters
        return letterSet.size() == 26;
    }
}

